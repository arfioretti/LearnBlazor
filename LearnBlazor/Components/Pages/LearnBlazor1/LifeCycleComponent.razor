@page "/lifecyclecomponent"

@using System.Threading

<PageTitle>Life Cycle</PageTitle>

@Count <button class="btn btn-primary" @onclick="StartCount">Count tread</button>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<_ChildLifeCycleComponent Count="@currentCount"></_ChildLifeCycleComponent>

@foreach (var item in EventType)
{
    <p>@item</p>
    <br />
}


@code {
    List<string> EventType = new List<string>();
    private int currentCount = 0;
    private int Count = 5;

    private void IncrementCount()
    {
        currentCount++;
    }
    protected override void OnInitialized()
    {
        EventType.Add("OnInitialized-parent");
    }
    protected override async Task OnInitializedAsync()
    {
        EventType.Add("OnInitializedAsync-parent");

    }
    protected override void OnParametersSet()
    {
        EventType.Add("OnParametersSet-parent");
    }
    protected override async Task OnParametersSetAsync()
    {
        EventType.Add("OnParametersSetAsync-parent");
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender)
        {
            currentCount = 100;
        }
        else
        {
            currentCount = 200;
        }
        EventType.Add("OnAfterRender-parent");
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        EventType.Add("OnAfterRenderAsync-parent");
    }
    protected override bool ShouldRender()
    {
        EventType.Add("ShouldRender-parent");
        return true;
    }
    private void StartCount()
    {
        var timer = new Timer(TimerCallback, null, 1000, 1000);
    }
    void TimerCallback(Object state)
    {
        if(Count>0)
        {
            Count--;
            InvokeAsync(StateHasChanged);

        }
    }
}
